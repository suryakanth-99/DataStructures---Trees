class Node:
    def __init__(self,data):
        self.data=data
        self.left=None
        self.right=None


def CreateBinaryTree(node, value, q):
    if node is None:
        node = Node(value)
        q.append(node)
        return node
    temp = q[0]
    if temp.left is None:
        temp.left = CreateBinaryTree(temp.left, value, q)
    elif temp.right is None:
        temp.right = CreateBinaryTree(temp.right, value, q)
        q.pop(0)
    return node


def printInorder(root):
    if not root:
        return
    printInorder(root.left)
    print(root.data, end=' ')
    printInorder(root.right)


def children_sum_property(root):
    if root is None or (root.left is None and root.right is None):
        return True
    elif root.left is None and root.right is not None:
        if root.data == root.right.data:
            return True
        return False
    elif root.right is None and root.left is not None:
        if root.data == root.left.data:
            return True
        return False
    else:
        if (root.data == root.left.data + root.right.data) and (children_sum_property(root.left) and children_sum_property(root.right)):
            return True
    return False


if __name__ == '__main__':
    root=None
    q=[]
    arr=[int(i) for i in input().split()]
    for i in range(len(arr)):
        root=CreateBinaryTree(root, arr[i], q)
    printInorder(root)
    print(children_sum_property(root))
